[
  {
    "name": "UrlParser",
    "comment": " This library helps you turn URLs into nicely structured data.\n\nIt is designed to be used with `elm-lang/navigation` to help folks create\nsingle-page applications (SPAs) where you manage browser navigation yourself.\n\n# Parsers\n@docs Parser, s, string, int\n\n# Combining Parsers\n@docs (</>), oneOf, format, custom\n\n# Run Parsers\n@docs parse\n\n",
    "aliases": [],
    "types": [
      {
        "name": "Parser",
        "comment": " A `Parser` is a way of turning a URL like `/blog/42/cat-herding-techniques`\ninto structured data.\n\nThe two type variables can be a bit tricky to understand. I think the best way\nto proceed is to just start using it. You can go far if you just assume it will\ndo the intuitive thing.\n\n**Note:** If you *insist* on digging deeper, I recommend figuring out the type\nof `int </> int` based on the type signatures for `int` and `</>`. You may be\nable to just know based on intuition, but instead, you should figure out\nexactly how every type variable gets unified. It is pretty cool! From there,\nmaybe check out the implementation a bit.\n",
        "args": [
          "formatter",
          "result"
        ],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "</>",
        "comment": " Combine parsers. It can be used to combine very simple building blocks\nlike this:\n\n    hello : Parser (String -> a) a\n    hello =\n      s \"hello\" </> string\n\nSo we can say hello to whoever we want. It can also be used to put together\narbitrarily complex parsers, so you *could* say something like this too:\n\n    doubleHello : Parser (String -> String -> a) a\n    doubleHello =\n      hello </> hello\n\nThis would match URLs like `/hello/alice/hello/bob`. The point is more that you\ncan build complex URL parsers in submodules and then put them on the end of\nparsers in parent modules.\n",
        "type": "UrlParser.Parser a b -> UrlParser.Parser b c -> UrlParser.Parser a c",
        "associativity": "right",
        "precedence": 8
      },
      {
        "name": "custom",
        "comment": " Create a custom segment parser. The `int` and `string` parsers are actually\ndefined with it like this:\n\n    import String\n\n    string : Parser (String -> a) a\n    string =\n      custom \"STRING\" Ok\n\n    int : Parser (Int -> a) a\n    int =\n      custom \"NUMBER\" String.toInt\n\nThe first argument is to help with error messages. It lets us say something\nlike, &ldquo;Got to the end of the URL but wanted /STRING&rdquo; instead of\nsomething totally nonspecific. The second argument lets you process the URL\nsegment however you want.\n\nAn example usage would be a parser that only accepts segments with a particular\nfile extension. So stuff like this:\n\n    css : Parser (String -> a) a\n    css =\n      custom \"FILE.css\" <| \\str ->\n        if String.endsWith \".css\" str then\n          Ok str\n\n        else\n          Err \"Need something that ends with .css\"\n",
        "type": "String -> (String -> Result.Result String a) -> UrlParser.Parser (a -> output) output"
      },
      {
        "name": "format",
        "comment": " Customize an existing parser. Perhaps you want a parser that matches any\nstring, but gives you the result with all lower-case letters:\n\n    import String\n\n    caseInsensitiveString : Parser (String -> a) a\n    caseInsensitiveString =\n      format String.toLower string\n\n    -- String.toLower : String -> String\n    -- string : Parser (String -> a) a\n\nI recommend working through how the type variables in `format` would get\nunified to get a better idea of things, but an intuition of how to use things\nis probably enough.\n",
        "type": "formatter -> UrlParser.Parser formatter a -> UrlParser.Parser (a -> result) result"
      },
      {
        "name": "int",
        "comment": " A parser that matches any integer. So the following parser will match\nURLs like `/blog/42` where `42` can be replaced by any positive number.\n\n    blog : Parser (Int -> a) a\n    blog =\n      s \"blog\" </> int\n\n**Note:** this parser will only match URLs with exactly two segments. So things\nlike `/blog/42/cat-herding-techniques` would fail. You could use `blog </> string`\nto handle that scenario if you wanted though!\n",
        "type": "UrlParser.Parser (Int -> a) a"
      },
      {
        "name": "oneOf",
        "comment": " Try a bunch of parsers one at a time. This is useful when there is a known\nset of branches that are possible. For example, maybe we have a website that\njust has a blog and a search:\n\n    type DesiredPage = Blog Int | Search String\n\n    desiredPage : Parser (DesiredPage -> a) a\n    desiredPage =\n      oneOf\n        [ format Blog (s \"blog\" </> int)\n        , format Search (s \"search\" </> string)\n        ]\n\nThe `desiredPage` parser will first try to match things like `/blog/42` and if\nthat fails it will try to match things like `/search/badgers`. It fails if none\nof the parsers succeed.\n",
        "type": "List (UrlParser.Parser a b) -> UrlParser.Parser a b"
      },
      {
        "name": "parse",
        "comment": " Actually run a parser. For example, if we want to handle blog posts with\nan ID number and a name, we might write something like this:\n\n    blog : Parser (Int -> String -> a) a\n    blog =\n      s \"blog\" </> int </> string\n\n    result : Result String (Int, String)\n    result =\n      parse (,) blog \"/blog/42/cat-herding-techniques\"\n\n    -- result == OK (42, \"cat-herding-techniques\")\n\nNotice that we use the `(,)` function for building tuples as the first argument\nto `parse`. The `blog` parser requires a formatter of type `(Int -> String -> a)`\nso we need to provide that to actually run things.\n\n**Note:** The error messages are intended to be fairly helpful. They are\nnice for debugging during development, but probably too detailed to show\ndirectly to users.\n",
        "type": "formatter -> UrlParser.Parser formatter a -> String -> Result.Result String a"
      },
      {
        "name": "s",
        "comment": " A parser that matches *exactly* the given string. So the following parser\nwill match the URL `/hello/world` and nothing else:\n\n    helloWorld : Parser a a\n    helloWorld =\n      s \"hello\" </> s \"world\"\n",
        "type": "String -> UrlParser.Parser a a"
      },
      {
        "name": "string",
        "comment": " A parser that matches any string. So the following parser will match\nURLs like `/search/whatever` where `whatever` can be replaced by any string\nyou can imagine.\n\n    search : Parser (String -> a) a\n    search =\n      s \"search\" </> string\n\n**Note:** this parser will only match URLs with exactly two segments. So things\nlike `/search/this/that` would fail. You could use `search </> string` to handle\nthat case if you wanted though!\n",
        "type": "UrlParser.Parser (String -> a) a"
      }
    ],
    "generated-with-elm-version": "0.17.0"
  }
]